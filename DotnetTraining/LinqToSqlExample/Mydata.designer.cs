#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSqlExample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FnfTraining")]
	public partial class MydataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmpTable(EmpTable instance);
    partial void UpdateEmpTable(EmpTable instance);
    partial void DeleteEmpTable(EmpTable instance);
    partial void InsertDeptTable(DeptTable instance);
    partial void UpdateDeptTable(DeptTable instance);
    partial void DeleteDeptTable(DeptTable instance);
    #endregion
		
		public MydataDataContext() : 
				base(global::LinqToSqlExample.Properties.Settings.Default.FnfTrainingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MydataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MydataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MydataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MydataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EmpTable> EmpTables
		{
			get
			{
				return this.GetTable<EmpTable>();
			}
		}
		
		public System.Data.Linq.Table<DeptTable> DeptTables
		{
			get
			{
				return this.GetTable<DeptTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpTable")]
	public partial class EmpTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _empId;
		
		private string _empName;
		
		private string _empAddress;
		
		private decimal _empSalary;
		
		private System.Nullable<int> _DeptId;
		
		private EntityRef<DeptTable> _DeptTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnempIdChanging(int value);
    partial void OnempIdChanged();
    partial void OnempNameChanging(string value);
    partial void OnempNameChanged();
    partial void OnempAddressChanging(string value);
    partial void OnempAddressChanged();
    partial void OnempSalaryChanging(decimal value);
    partial void OnempSalaryChanged();
    partial void OnDeptIdChanging(System.Nullable<int> value);
    partial void OnDeptIdChanged();
    #endregion
		
		public EmpTable()
		{
			this._DeptTable = default(EntityRef<DeptTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int empId
		{
			get
			{
				return this._empId;
			}
			set
			{
				if ((this._empId != value))
				{
					this.OnempIdChanging(value);
					this.SendPropertyChanging();
					this._empId = value;
					this.SendPropertyChanged("empId");
					this.OnempIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string empName
		{
			get
			{
				return this._empName;
			}
			set
			{
				if ((this._empName != value))
				{
					this.OnempNameChanging(value);
					this.SendPropertyChanging();
					this._empName = value;
					this.SendPropertyChanged("empName");
					this.OnempNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empAddress", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string empAddress
		{
			get
			{
				return this._empAddress;
			}
			set
			{
				if ((this._empAddress != value))
				{
					this.OnempAddressChanging(value);
					this.SendPropertyChanging();
					this._empAddress = value;
					this.SendPropertyChanged("empAddress");
					this.OnempAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empSalary", DbType="Money NOT NULL")]
		public decimal empSalary
		{
			get
			{
				return this._empSalary;
			}
			set
			{
				if ((this._empSalary != value))
				{
					this.OnempSalaryChanging(value);
					this.SendPropertyChanging();
					this._empSalary = value;
					this.SendPropertyChanged("empSalary");
					this.OnempSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptId", DbType="Int")]
		public System.Nullable<int> DeptId
		{
			get
			{
				return this._DeptId;
			}
			set
			{
				if ((this._DeptId != value))
				{
					if (this._DeptTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeptIdChanging(value);
					this.SendPropertyChanging();
					this._DeptId = value;
					this.SendPropertyChanged("DeptId");
					this.OnDeptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeptTable_EmpTable", Storage="_DeptTable", ThisKey="DeptId", OtherKey="DeptId", IsForeignKey=true)]
		public DeptTable DeptTable
		{
			get
			{
				return this._DeptTable.Entity;
			}
			set
			{
				DeptTable previousValue = this._DeptTable.Entity;
				if (((previousValue != value) 
							|| (this._DeptTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeptTable.Entity = null;
						previousValue.EmpTables.Remove(this);
					}
					this._DeptTable.Entity = value;
					if ((value != null))
					{
						value.EmpTables.Add(this);
						this._DeptId = value.DeptId;
					}
					else
					{
						this._DeptId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeptTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeptTable")]
	public partial class DeptTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeptId;
		
		private string _Deptname;
		
		private EntitySet<EmpTable> _EmpTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeptIdChanging(int value);
    partial void OnDeptIdChanged();
    partial void OnDeptnameChanging(string value);
    partial void OnDeptnameChanged();
    #endregion
		
		public DeptTable()
		{
			this._EmpTables = new EntitySet<EmpTable>(new Action<EmpTable>(this.attach_EmpTables), new Action<EmpTable>(this.detach_EmpTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeptId
		{
			get
			{
				return this._DeptId;
			}
			set
			{
				if ((this._DeptId != value))
				{
					this.OnDeptIdChanging(value);
					this.SendPropertyChanging();
					this._DeptId = value;
					this.SendPropertyChanged("DeptId");
					this.OnDeptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deptname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Deptname
		{
			get
			{
				return this._Deptname;
			}
			set
			{
				if ((this._Deptname != value))
				{
					this.OnDeptnameChanging(value);
					this.SendPropertyChanging();
					this._Deptname = value;
					this.SendPropertyChanged("Deptname");
					this.OnDeptnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeptTable_EmpTable", Storage="_EmpTables", ThisKey="DeptId", OtherKey="DeptId")]
		public EntitySet<EmpTable> EmpTables
		{
			get
			{
				return this._EmpTables;
			}
			set
			{
				this._EmpTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmpTables(EmpTable entity)
		{
			this.SendPropertyChanging();
			entity.DeptTable = this;
		}
		
		private void detach_EmpTables(EmpTable entity)
		{
			this.SendPropertyChanging();
			entity.DeptTable = null;
		}
	}
}
#pragma warning restore 1591
